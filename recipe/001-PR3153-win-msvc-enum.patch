From d0a0241133750b3d7fdf9b7c572938a19625093d Mon Sep 17 00:00:00 2001
From: Jason Wang <w4g@ornl.gov>
Date: Sat, 2 Apr 2022 15:45:26 -0400
Subject: [PATCH] fix type warning and enum conflict

---
 source/adios2/engine/ssc/SscReader.cpp                    | 4 ++--
 source/adios2/engine/ssc/SscReader.tcc                    | 2 +-
 source/adios2/helper/adiosCommDummy.cpp                   | 2 +-
 source/adios2/helper/adiosLog.cpp                         | 6 +++---
 source/adios2/helper/adiosLog.h                           | 2 +-
 source/adios2/helper/adiosSystem.cpp                      | 8 ++++----
 source/adios2/operator/compress/CompressBZIP2.cpp         | 2 +-
 source/adios2/operator/compress/CompressBlosc.cpp         | 2 +-
 .../toolkit/burstbuffer/FileDrainerSingleThread.cpp       | 5 ++---
 source/adios2/toolkit/query/JsonWorker.cpp                | 2 +-
 source/adios2/toolkit/query/Query.cpp                     | 2 +-
 source/adios2/toolkit/query/Worker.cpp                    | 3 +--
 source/adios2/toolkit/query/XmlWorker.cpp                 | 3 +--
 source/utils/adios_reorganize/Reorganize.cpp              | 6 +++---
 14 files changed, 23 insertions(+), 26 deletions(-)

diff --git a/source/adios2/engine/ssc/SscReader.cpp b/source/adios2/engine/ssc/SscReader.cpp
index e8461258b..18e5e13e9 100644
--- a/source/adios2/engine/ssc/SscReader.cpp
+++ b/source/adios2/engine/ssc/SscReader.cpp
@@ -150,7 +150,7 @@ StepStatus SscReader::BeginStep(const StepMode stepMode,
                 {
                     helper::Log("Engine", "SSCReader", "BeginStep",
                                 "unknown data type", 0, m_Comm.Rank(), 0,
-                                m_Verbosity, helper::LogMode::ERROR);
+                                m_Verbosity, helper::FATALERROR);
                 }
             }
         }
@@ -252,7 +252,7 @@ void SscReader::PerformGets()
                         {
                             helper::Log("Engine", "SSCReader", "PerformGets",
                                         "unknown data type", 0, m_Comm.Rank(),
-                                        0, m_Verbosity, helper::LogMode::ERROR);
+                                        0, m_Verbosity, helper::FATALERROR);
                         }
                     }
                 }
diff --git a/source/adios2/engine/ssc/SscReader.tcc b/source/adios2/engine/ssc/SscReader.tcc
index 6271b69b9..cf921e875 100644
--- a/source/adios2/engine/ssc/SscReader.tcc
+++ b/source/adios2/engine/ssc/SscReader.tcc
@@ -154,7 +154,7 @@ void SscReader::GetDeferredCommon(Variable<T> &variable, T *data)
                     {
                         helper::Log("Engine", "SSCReader", "GetDeferredCommon",
                                     "unknown ShapeID", 0, m_Comm.Rank(), 0,
-                                    m_Verbosity, helper::LogMode::ERROR);
+                                    m_Verbosity, helper::FATALERROR);
                     }
                 }
             }
diff --git a/source/adios2/helper/adiosCommDummy.cpp b/source/adios2/helper/adiosCommDummy.cpp
index 9c0234952..c9d4eae7f 100644
--- a/source/adios2/helper/adiosCommDummy.cpp
+++ b/source/adios2/helper/adiosCommDummy.cpp
@@ -25,7 +25,7 @@ void CommDummyError(const std::string &msg)
     helper::Log("Helper", "adiosCommDummy", "CommDummyError",
                 "CommDummy: a function returned error code '" + msg +
                     "'. Aborting!",
-                helper::LogMode::ERROR);
+                helper::FATALERROR);
     std::abort();
 }
 }
diff --git a/source/adios2/helper/adiosLog.cpp b/source/adios2/helper/adiosLog.cpp
index f080797b3..f13769b84 100644
--- a/source/adios2/helper/adiosLog.cpp
+++ b/source/adios2/helper/adiosLog.cpp
@@ -54,7 +54,7 @@ std::string MakeMessage(const std::string &component, const std::string &source,
     {
         m << warningColor << " [ADIOS2 WARNING]" << defaultColor;
     }
-    else if (mode == ERROR)
+    else if (mode == FATALERROR)
     {
         m << errorColor << " [ADIOS2 ERROR]" << defaultColor;
     }
@@ -102,7 +102,7 @@ void Log(const std::string &component, const std::string &source,
     if ((logRank >= 0 && commRank >= 0 && logRank != commRank) ||
         priority > verbosity ||
         (messages.find(message) != messages.end() &&
-         (mode == LogMode::ERROR || mode == LogMode::WARNING)))
+         (mode == LogMode::FATALERROR || mode == LogMode::WARNING)))
     {
         return;
     }
@@ -115,7 +115,7 @@ void Log(const std::string &component, const std::string &source,
     {
         std::cout << m;
     }
-    else if (mode == ERROR)
+    else if (mode == FATALERROR)
     {
         std::cerr << m;
     }
diff --git a/source/adios2/helper/adiosLog.h b/source/adios2/helper/adiosLog.h
index 570ffd68a..bac584732 100644
--- a/source/adios2/helper/adiosLog.h
+++ b/source/adios2/helper/adiosLog.h
@@ -21,7 +21,7 @@ namespace helper
 enum LogMode : char
 {
     EXCEPTION = 'x',
-    ERROR = 'e',
+    FATALERROR = 'e',
     WARNING = 'w',
     INFO = 'i'
 };
diff --git a/source/adios2/helper/adiosSystem.cpp b/source/adios2/helper/adiosSystem.cpp
index 7ff903b84..814b6d230 100644
--- a/source/adios2/helper/adiosSystem.cpp
+++ b/source/adios2/helper/adiosSystem.cpp
@@ -97,25 +97,25 @@ int ExceptionToError(const std::string &function)
     catch (std::invalid_argument &e)
     {
         helper::Log("Helper", "adiosSystem", "ExceptionToError",
-                    function + ": " + e.what(), helper::LogMode::ERROR);
+                    function + ": " + e.what(), helper::FATALERROR);
         return 1;
     }
     catch (std::system_error &e)
     {
         helper::Log("Helper", "adiosSystem", "ExceptionToError",
-                    function + ": " + e.what(), helper::LogMode::ERROR);
+                    function + ": " + e.what(), helper::FATALERROR);
         return 2;
     }
     catch (std::runtime_error &e)
     {
         helper::Log("Helper", "adiosSystem", "ExceptionToError",
-                    function + ": " + e.what(), helper::LogMode::ERROR);
+                    function + ": " + e.what(), helper::FATALERROR);
         return 3;
     }
     catch (std::exception &e)
     {
         helper::Log("Helper", "adiosSystem", "ExceptionToError",
-                    function + ": " + e.what(), helper::LogMode::ERROR);
+                    function + ": " + e.what(), helper::FATALERROR);
         return 4;
     }
 }
diff --git a/source/adios2/operator/compress/CompressBZIP2.cpp b/source/adios2/operator/compress/CompressBZIP2.cpp
index a7aa8df1f..700e4503e 100644
--- a/source/adios2/operator/compress/CompressBZIP2.cpp
+++ b/source/adios2/operator/compress/CompressBZIP2.cpp
@@ -78,7 +78,7 @@ size_t CompressBZIP2::Operate(const char *dataIn, const Dims &blockStart,
 
     unsigned int sourceOffset = 0;
     unsigned int batchInfoOffset = destOffset;
-    destOffset += batches * 4 * sizeof(unsigned int);
+    destOffset += static_cast<unsigned int>(batches * 4 * sizeof(unsigned int));
 
     for (size_t b = 0; b < batches; ++b)
     {
diff --git a/source/adios2/operator/compress/CompressBlosc.cpp b/source/adios2/operator/compress/CompressBlosc.cpp
index 8233fc3f3..e414b64ac 100644
--- a/source/adios2/operator/compress/CompressBlosc.cpp
+++ b/source/adios2/operator/compress/CompressBlosc.cpp
@@ -141,7 +141,7 @@ size_t CompressBlosc::Operate(const char *dataIn, const Dims &blockStart,
                         "ADIOS WARNING: Unknown parameter keyword '" + key +
                             "' with value '" + value +
                             "' passed to Blosc compression operator.",
-                        helper::ERROR);
+                        helper::FATALERROR);
         }
     }
 
diff --git a/source/adios2/toolkit/burstbuffer/FileDrainerSingleThread.cpp b/source/adios2/toolkit/burstbuffer/FileDrainerSingleThread.cpp
index a0452d64c..3c35211dc 100644
--- a/source/adios2/toolkit/burstbuffer/FileDrainerSingleThread.cpp
+++ b/source/adios2/toolkit/burstbuffer/FileDrainerSingleThread.cpp
@@ -218,9 +218,8 @@ void FileDrainerSingleThread::DrainThread()
                 catch (std::ios_base::failure &e)
                 {
                     helper::Log("BurstBuffer", "FileDrainerSingleThread",
-                                "DrainThread",
-                                "ADIOS THREAD ERROR: " + std::string(e.what()),
-                                helper::LogMode::ERROR);
+                                "DrainThread", std::string(e.what()),
+                                helper::FATALERROR);
                 }
             }
             break;
diff --git a/source/adios2/toolkit/query/JsonWorker.cpp b/source/adios2/toolkit/query/JsonWorker.cpp
index 4b842267f..88393f447 100644
--- a/source/adios2/toolkit/query/JsonWorker.cpp
+++ b/source/adios2/toolkit/query/JsonWorker.cpp
@@ -105,7 +105,7 @@ void JsonWorker::ParseJson()
         {
             helper::Log("Query", "JsonWorker", "ParseJson",
                         "No such variable: " + varName.dump(),
-                        helper::LogMode::ERROR);
+                        helper::FATALERROR);
             return nullptr;
         }
 
diff --git a/source/adios2/toolkit/query/Query.cpp b/source/adios2/toolkit/query/Query.cpp
index 0ed551a03..44d3fee78 100644
--- a/source/adios2/toolkit/query/Query.cpp
+++ b/source/adios2/toolkit/query/Query.cpp
@@ -244,7 +244,7 @@ bool QueryVar::IsSelectionValid(adios2::Dims &shape) const
         helper::Log(
             "Query", "QueryVar", "IsSelectionValid",
             "Query selection dimension is different from shape dimension",
-            helper::LogMode::ERROR);
+            helper::FATALERROR);
         return false; // different dimension
     }
 
diff --git a/source/adios2/toolkit/query/Worker.cpp b/source/adios2/toolkit/query/Worker.cpp
index 8541cbadb..571c33c11 100644
--- a/source/adios2/toolkit/query/Worker.cpp
+++ b/source/adios2/toolkit/query/Worker.cpp
@@ -72,8 +72,7 @@ QueryVar *Worker::GetBasicVarQuery(adios2::core::IO &currentIO,
     if (varType == DataType::None)
     {
         helper::Log("Query", "Worker", "GetBasicVarQuery",
-                    "No such variable: " + variableName,
-                    helper::LogMode::ERROR);
+                    "No such variable: " + variableName, helper::FATALERROR);
         return nullptr;
     }
 #define declare_type(T)                                                        \
diff --git a/source/adios2/toolkit/query/XmlWorker.cpp b/source/adios2/toolkit/query/XmlWorker.cpp
index 40e7c855d..c3266a724 100644
--- a/source/adios2/toolkit/query/XmlWorker.cpp
+++ b/source/adios2/toolkit/query/XmlWorker.cpp
@@ -149,8 +149,7 @@ QueryVar *XmlWorker::ParseVarNode(const pugi::xml_node &node,
     if (varType == DataType::None)
     {
         helper::Log("Query", "XmlWorker", "ParseVarNode",
-                    "No such variable: " + variableName,
-                    helper::LogMode::ERROR);
+                    "No such variable: " + variableName, helper::FATALERROR);
         helper::Throw<std::ios_base::failure>(
             "Toolkit", "query::XmlWorker", "ParseVarNode",
             "variable: " + variableName + " not found");
diff --git a/source/utils/adios_reorganize/Reorganize.cpp b/source/utils/adios_reorganize/Reorganize.cpp
index 80db2a04f..b269facf0 100644
--- a/source/utils/adios_reorganize/Reorganize.cpp
+++ b/source/utils/adios_reorganize/Reorganize.cpp
@@ -597,7 +597,7 @@ int Reorganize::ProcessMetadata(core::Engine &rStream, core::IO &io,
                     "write buffer size needs to hold about " +
                         std::to_string(bufsize) + " bytes but max is set to " +
                         std::to_string(max_write_buffer_size),
-                    m_Rank, m_Rank, 0, 0, helper::LogMode::ERROR);
+                    m_Rank, m_Rank, 0, 0, helper::FATALERROR);
         return 1;
     }
 
@@ -608,7 +608,7 @@ int Reorganize::ProcessMetadata(core::Engine &rStream, core::IO &io,
                         std::to_string(largest_block) +
                         " bytes but max is set to " +
                         std::to_string(max_read_buffer_size),
-                    m_Rank, m_Rank, 0, 0, helper::LogMode::ERROR);
+                    m_Rank, m_Rank, 0, 0, helper::FATALERROR);
         return 1;
     }
     return retval;
@@ -628,7 +628,7 @@ int Reorganize::ReadWrite(core::Engine &rStream, core::Engine &wStream,
                 std::to_string(nvars) +
                 ") to read does not match the number of processed variables (" +
                 std::to_string(varinfo.size()) + ")",
-            m_Rank, m_Rank, 0, 0, helper::LogMode::ERROR);
+            m_Rank, m_Rank, 0, 0, helper::FATALERROR);
     }
 
     /*
